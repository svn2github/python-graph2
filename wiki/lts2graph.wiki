#summary Draws a graph for a given finite definite automaton described as a labelled transition system. Uses python-graph and GraphViz python binding.

=== Code ===

For convenience, the code is available [http://pmatiello.googlepages.com/lts2graph.py here].

{{{
#!/usr/bin/env python

"""
This small application will build and draw a graph for a given finite definite automaton described
as a labelled transition system.

This is a very naive, probably useless, possibly incorrect, barely tested implementation. No
validation is ever performed. Take care or it will burn your house and kill your cat.
"""


# Module metadata
__authors__ = "Pedro Matiello"
__license__ = "MIT"


# Imports
import sys
import graph
sys.path.append('/usr/lib/graphviz/python/')
import gv


def load_automaton(filename):
	"""
	Read a automaton described as a labelled transition system and build the equivalent graph.
	
	@type  filename: string
	@param filename: Name of the file containing the LTS-described automaton.
	
	@rtype:  graph
	@return: Automaton's graph.
	"""
	gr = graph.graph()
	infile = file(filename,'r')
	line = infile.readline()
	final = []
	while (line):
		line = line.replace("\n",'').split(' ')
		datatype = line[0]
		data = line[1:]
		if (datatype == 'Q'):
			# States
			for each in data:
				gr.add_node(each)
		if (datatype == 'A'):
			# Alphabet
			pass
		if (datatype == 'F'):
			# Final states
			final = final + data
		if (datatype == 's'):
			# Initial state
			gr.add_node('.')
			gr.add_arrow('.',data[0])
		if (datatype == 't'):
			# Transitions
			gr.add_arrow(data[1], data[2], label=data[0])
		line = infile.readline()
	return gr, final


# Main()
try:
	filename = sys.argv[1]
	gr, final = load_automaton(sys.argv[1])
	dot = gr.write(fmt='dot')
except IndexError:
	print "Syntax: %s filename" % sys.argv[0]
	sys.exit(1)
except IOError:
	print "Can't open file %s" % filename
	sys.exit(2)
except:
	print "Unknown error. Die."
	sys.exit(255)

# Mark initial state
dot = dot.replace('"."\n','"."[shape=point]\n')

# Mark final states
for each in final:
	dot = dot.replace('"'+each+'"\n','"'+each+'"[shape=doublecircle]\n')	


# Print graph as PNG image
gvv = gv.readstring(dot)
gv.layout(gvv,'circo')
gv.render(gvv,'png',filename + '.png')
}}}


=== Example ===

For this input:
{{{
Q 0 1 2
A a b
s 0
F 1 2
t a 0 0
t b 0 1
t a 1 0
t b 1 2
t a 2 2
t b 2 1
}}}

This image will be generated as output:
||http://pmatiello.googlepages.com/example.tls.png||